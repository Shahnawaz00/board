// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  bookmarks     Discussion[] @relation(name: "UserBookmarks")
  following     Space[]
  Discussion    Discussion[]
  Comment       Comment[]
  sessionId     String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  title        String?
  content      String?   @db.VarChar(10000)
  upvotes      Int?
  downvotes    Int?
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  space        Space     @relation(fields: [spaceId], references: [id])
  spaceId      Int
  Comment      Comment[]
  bookmarkedBy User[]    @relation(name: "UserBookmarks")
}

model Space {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?      @db.VarChar(1000)
  Discussion  Discussion[]
  Comment     Comment[]
  users       User[]
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String?    @db.VarChar(1000)
  space        Space      @relation(fields: [spaceId], references: [id])
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  discussionId Int
  userId       Int
  spaceId      Int
}
